<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">

	<!--<Spawn Actor>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title> Spawn Actor </Title>
			<Author>Ariel Gimenez</Author>
			<Description>Spawn Actor</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
				// Don't forget to include World.h to use methods inside UWorld Class
				FActorSpawnParameters spawn_params{};
				spawn_params.Owner = nullptr; // Specify owner actor for this new actor if you need one.
				spawn_params.Instigator = nullptr; // Specify instigator pawn for this new actor if you need one
				spawn_params.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;

				auto* const new_actor_class = AActor::StaticClass(); // If you need other class than AActor you can change with YOURCLASS::StaticClass() to get UClass
				//.h
				// If you need to spawn class made it in blueprint you can use TSubClassOf to get the UClass
				//UPROPERTY(EditAnywhere, Category = Spawner)
				//TSubclassOf<AActor> blueprint_class{};

				const auto new_actor_transform = FTransform::Identity; // Identity Matrix if you need the default transformation.

				// Spawn Actor return a Pointer to new Actor
				GetWorld()->SpawnActor<AActor>(new_actor_class, new_actor_transform, spawn_params);
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>


	<!--<Attach actor compoenent Game Move Unreal>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Spawn actor and atttach to bone </Title>
			<Author>Ariel Gimenez</Author>
			<Description>create an object of type actor and attach it to a socket using a method</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[


		//.h
		UPROPERTY(EditAnywhere, Category = gun)
		TSubclassOf<AActor> actor_to_attach{};

		///.cpp
		//include
		#include <Engine/World.h>

		//beginPlay
		attach_guns(actor_to_attach, "SocketNameHand");


		//Attach effect in bone
		AActor* AEnemy::attach_ice_effect(TSubclassOf<AActor> effectClass, FName socketName)
		{
			const FTransform orientation_socket = GetMesh()->GetSocketTransform(socketName, ERelativeTransformSpace::RTS_World);

			AActor* newEffect = GetWorld()->SpawnActor(effectClass, &orientation_socket);//FTransform por referencia constante
			if (newEffect == nullptr) return nullptr;

			newEffect->AttachToComponent(GetMesh(), FAttachmentTransformRules::SnapToTargetIncludingScale, socketName);

			return newEffect;
		}

		//////////////
			]]>
			</Code>
		</Snippet>
	</CodeSnippet>


	<!--<Spawn actor proyectil to forward vector from socket Unreal>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Spawn actor proyectil to forward vector in socket position </Title>
			<Author>Ariel Gimenez</Author>
			<Description>instantiates an object from the socket position and takes into account the rotation of the instantiating object to use as a forward vector. This is often used for bullets, shots, or things that go forward.</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
		
		//.H
		UPROPERTY(EditAnywhere, BlueprintReadWrite)
		TSubclassOf<AActor> magic_proyectil_example;
		
		UPROPERTY(EditAnywhere, BlueprintReadWrite)
		FName socket_name_instance_proyectil_example
		
		
		//.cpp
		AActor* YourClass::spawn_proyectil_to_forward_vector_in_socket_position(TSubclassOf<AActor> proyectil_class, FName socketName)
		{
			///////////////
			//.CPP
			//#include <Engine/World.h> // Don't forget to include World.h to use methods inside UWorld Class
			if (GetWorld() == nullptr) return nullptr;
			if (proyectil_class == nullptr) return nullptr;

			FActorSpawnParameters spawn_params{};
			spawn_params.Owner = nullptr; // Specify owner actor for this new actor if you need one.
			spawn_params.Instigator = nullptr; // Specify instigator pawn for this new actor if you need one
			spawn_params.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;

			FTransform new_actor_transform = FTransform::Identity; // Identity Matrix if you need the default transformation.
			FVector socket_position = GetMesh()->GetSocketTransform(socketName, ERelativeTransformSpace::RTS_World).GetLocation();

			new_actor_transform.SetLocation(socket_position);
			new_actor_transform.SetRotation(GetActorRotation().Quaternion());

			// Spawn Actor return a Pointer to new Actor
			AActor* newProyectil = GetWorld()->SpawnActor<AActor>(proyectil_class, new_actor_transform, spawn_params);
	
			return newProyectil;
		}
		
		
		//Example use begin play.
		spawn_proyectil_to_forward_vector_in_socket_position(magic_proyectil_example, socket_name_instance_proyectil_example);

		//////////////
		
			]]>
			</Code>
		</Snippet>
	</CodeSnippet>

</CodeSnippets>





