<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">


	<!--<Begin Play of UI>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Event Begin Play of UI </Title>
			<Author>Ariel Gimenez</Author>
			<Description>Create the Native construct which works like a "begin play" of an actor, but it's not a begin play, but a special UI method to fetch objects when you start the game.</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
				
	//.h	
	protected:
		void NativeConstruct() override;
	
	//.cpp
	void You_class::NativeConstruct()
	{
			Super::NativeConstruct();
	}

	]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<!--<NativeTick>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Event Tick of UI </Title>
			<Author>Ariel Gimenez</Author>
			<Description>Template for tick events that is called 60 times per second but in UI</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
	//.h		
	Protected:
		void NativeTick(const FGeometry& MyGeometry, float InDeltaTime) override;
	
	//.cpp
	void You_class::NativeTick(const FGeometry& MyGeometry, float InDeltaTime)
	{
			Super::NativeTick(MyGeometry,InDeltaTime);

	}
	
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	
		<!--<On Clicked Button Widget UUserWidget>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>On Clicked Button Widget UUserWidget</Title>
			<Author>Ariel Gimenez</Author>
			<Description>Click Button event, keep in mind that it is necessary to create a button for this, see the UI section how to create a UButton</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
			//.h		
			public:
			UPROPERTY(meta = (BindWidget))
			class UButton* my_button{ nullptr};//create a "Button" with the same as this variable name inside blueprint widget
	
			UFUNCTION()
			void On_Clicked();
	
			//.Cpp
			#include "Components/Button.h" 
	
			//Example NativeConstruct
			my_button->OnClicked.AddDynamic(this, &You_class::On_Clicked);
		
			void You_class::On_Clicked()
			{
				if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, TEXT("printing a message from the button but from C++"));
			}
			
						]]>
			</Code>
		</Snippet>
	</CodeSnippet>

  <!--<event when animation ends UWidgetAnimation>-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>At the end animation UWidgetAnimation</Title>
      <Author>Ariel Gimenez</Author>
      <Description>When an animation created within the blueprint widget ends</Description>
      <!--<Shortcut> Alt </Shortcut>-->
    </Header>
    <Snippet>
      <Code Language="CPP">
        <![CDATA[
			//.h		
			public:
				UPROPERTY(BlueprintReadWrite)//call from editor
				UWidgetAnimation* ref_animation_buton {nullptr};//get animation from C++

				FWidgetAnimationDynamicEvent to_end_animation_button_delegate; //delegate to function

				UFUNCTION()
				void to_end_animation_button();//function
	
			//.Cpp
			//Example NativeConstruct
				to_end_animation_button_delegate.BindDynamic(this, &UYouClass::to_end_animation_button);
				if (ref_animation_buton == nullptr) return;
				BindToAnimationFinished(ref_animation_buton, to_end_animation_button_delegate);

				void UYouClass::to_end_animation_button()
				{
					if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, TEXT("end UWidgetAnimation"));
				}

			
						]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--<event when slider value changes>-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>When the slider changes the value</Title>
      <Author>Ariel Gimenez</Author>
      <Description>The slider has a value, when moving it changes, this event registers the change in a method with a parameter</Description>
      <!--<Shortcut> Alt </Shortcut>-->
    </Header>
    <Snippet>
      <Code Language="CPP">
        <![CDATA[
			//.h
			public:
				UPROPERTY(BlueprintReadWrite, meta = (BindWidget))
				class USlider* new_slider{ nullptr };

				UFUNCTION()
				void On_Slider_Change(float value);

			//.cpp
				#include <Components/Slider.h>
	
				//example NativeConstruct
				new_slider->OnValueChanged.AddDynamic(this, &UCalibrar_Microfono::On_Slider_Change);
				new_slider->Value = 0.3;

				void UCalibrar_Microfono::On_Slider_Change(float value)
				{
					const float float_to_print = value;
					if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, FString::Printf(TEXT("float: %f"), float_to_print));
				}

			
						]]>
      </Code>
    </Snippet>
  </CodeSnippet>




</CodeSnippets>

