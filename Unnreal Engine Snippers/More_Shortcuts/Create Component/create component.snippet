<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">

	<!--<Crear USceneComponent>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title> Create USceneComponent</Title>
			<Author>Ariel Gimenez</Author>
			<Description>
				The USceneComponent is often used to be the root of a blueprint to avoid conflicts when creating many components from C++. To avoid display conflicts in the editor important to make it VISIBLEANYWHERE
			</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
				
				//in.H
				public:
					UPROPERTY(VisibleAnywhere)
					USceneComponent* Root{ nullptr };
				
				//in .CPP
				//Constructor
				Root = CreateDefaultSubobject<USceneComponent>(TEXT("root"));
				RootComponent = Root;
				box_trigger_point->SetupAttachment(RootComponent);//sino agregas esto no vas a ver las propiedades de transform position scale
				
				
				]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	<!--<Crear USceneComponent>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title> Create UBoxComponent</Title>
			<Author>Ariel Gimenez</Author>
			<Description>
				The UBoxComponent is a transparent box that is often used to fire events when two bodies intersect. To avoid display conflicts in the editor important to make it VISIBLEANYWHERE
			</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
				
				//in.H
				public:
					UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
					class UBoxComponent* box_trigger_dead;
				
				//in .CPP
				#include "Components/BoxComponent.h"
				
				//Constructor
				box_trigger_dead = CreateDefaultSubobject<UBoxComponent>(TEXT("box_trigger_dead"));
				box_trigger_dead->SetBoxExtent(FVector(64, 64, 64));
				box_trigger_dead->AttachToComponent(RootComponent, FAttachmentTransformRules::KeepRelativeTransform);
				box_trigger_dead->SetupAttachment(RootComponent);//sino agregas esto no vas a ver las propiedades de transform position scale
				
				
				]]>
			</Code>
		</Snippet>
	</CodeSnippet>


	<!--<Crear USceneComponent>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title> Create UStaticMeshComponent</Title>
			<Author>Ariel Gimenez</Author>
			<Description>
				The UStaticMeshComponent is an object that is often used to render objects, it also has physical and collision properties that can interact with the inputs inside a pawn. To avoid display conflicts in the editor important to make it VISIBLEANYWHERE
			</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
				
				//in.H
				public:
					UPROPERTY(VisibleAnywhere,BlueprintReadWrite)
					class UStaticMeshComponent* mesh_Bird{ nullptr };
				
				//in .CPP
				#include "Components/StaticMeshComponent.h"
				
				//Constructor
				mesh_Bird = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("mesh_Bird"));
				mesh_Bird->AttachToComponent(RootComponent, FAttachmentTransformRules::KeepRelativeTransform);
				mesh_Bird->SetupAttachment(RootComponent);//sino agregas esto no vas a ver las propiedades de transform position scale
				
				]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	
</CodeSnippets>

