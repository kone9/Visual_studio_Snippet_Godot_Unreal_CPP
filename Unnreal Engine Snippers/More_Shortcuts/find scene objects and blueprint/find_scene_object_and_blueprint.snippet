<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">


	<!--<Search Game Move Unreal>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>
				Get Game Mode when starting the game
			</Title>
			<Author>Ariel Gimenez</Author>
			<Description>Code to find the game mode. From experience in projects, I recommend looking for the game mode after a 0.1 second of starting the game, otherwise it may have a kind of null pointer that crashes the editor. As a fix I add a timer with a wait of 0.1 seconds before looking for the gamemode, you can try this in blueprint before C++ if you have the doubt</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[

		///////////////
		/// in .H
			private:
			class AGameModeBase* game_mode{nullptr};
			
			public:
				FTimerHandle timer_handle;

				UPROPERTY(EditAnywhere)
					float timer_to_end{ 0.1 };

				UPROPERTY(EditAnywhere)
					bool repeat_timer{ false };

				UFUNCTION()
				void OnTimerOut();
				
			
			
		///.cpp
			//include
			#include <Kismet/GameplayStatics.h>
			#include <Engine/World.h>
			#include "Engine/Engine.h"
			#include "TimerManager.h"
			//#include "YouClassGameMode.h"


			//begin play		
			if (GetWorld() == nullptr) return;
			GetWorld()->GetTimerManager().SetTimer(timer_handle, this, &YouClass::OnTimerOut, timer_to_end, repeat_timer);
			
			//get game mode after 1 second
			void AColumns::OnTimerOut()
			{
				//game_mode = UGameplayStatics::GetGameMode( GetWorld() );
				if (GetWorld()->GetAuthGameMode() == nullptr)
				{
					if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, TEXT("No se encontro el GameMode"));
					return;
				}

				game_mode = GetWorld()->GetAuthGameMode();
			}
			
			//somewhere
			//if(game_mode != nullptr) Cast<AYouClassGameMode>(game_mode)->life += 10;

		//////////////
			]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	
	
	<!--<Search Game Move Unreal>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get Game Move</Title>
			<Author>Ariel Gimenez</Author>
			<Description>Code to find the game mode. if you use it at startup, use the other one with timeout </Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[

		///////////////
		/// in .H
			private:
			class AGameModeBase* game_mode;
			
		///.cpp
			//include
			#include <Kismet/GameplayStatics.h>
			//#include "YouClassGameMode.h"

			//in constructor
			game_mode = nullptr;

			#begin play
			game_mode = UGameplayStatics::GetGameMode(GetWorld());
			//if(game_mode != nullptr) Cast< AYouClassGameMode>(game_mode)->life += 10;

		//////////////
			]]>
			</Code>
		</Snippet>
	</CodeSnippet>


	<!--<Search Game Move Unreal>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get a component by class </Title>
			<Author>Ariel Gimenez</Author>
			<Description>example of how to find a component using the reference class</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[

	///////////////

	///.cpp
	AActor* owner = GetOwner();
	if (owner == nullptr) return;
	UActorComponent* ComponentReference = Cast< UActorComponent>(GetOwner()->GetComponentByClass(UActorComponent::StaticClass())); //example of how to find a component using the reference class

	//////////////

			]]>
			</Code>
		</Snippet>
	</CodeSnippet>


	<!--<Get Actor With TAG Unreal>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get Actor with tag </Title>
			<Author>Ariel Gimenez</Author>
			<Description>example of how to find a Actor with tag </Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[

	///////////////
	
	///.cpp
	//include
	#include <Kismet/GameplayStatics.h>
	
	//Begin play example
	//search and get actor with tag
	TArray<AActor*> actor_with_tag{};
	FName tag_actor = TEXT("actor_tag");// add tag actor here
	UGameplayStatics::GetAllActorsWithTag(GetWorld(), tag_actor, actor_with_tag);
	AActor* actor = actor_with_tag[0];
	
	//Use
	if (actor == nullptr) return;
	FString new_text_print_concatenate = "Name of Actor is: " + actor->GetActorLabel();
	if (GEngine) GEngine->AddOnScreenDebugMessage(-1, 3.0f, FColor::Yellow, *new_text_print_concatenate);

	//////////////

			]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	
	
	
		<!--<Search character movementl>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get a character movement </Title>
			<Author>Ariel Gimenez</Author>
			<Description>example get character movement component, which is inside character class</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[

	///////////////

	///.cpp
	
	UCharacterMovementComponent* character_component = GetCharacterMovement();

	//////////////

			]]>s
			</Code>
		</Snippet>
	</CodeSnippet>


	<!--<Search parent actor from compoenent>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get parent actor of this component </Title>
			<Author>Ariel Gimenez</Author>
			<Description>To access the actor from a child component,(you need to have a pointer to a component in order to do this)</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[

	UPrimitiveComponent* OtherComp = nullptr; //add to this pointer your component
	if (OtherComp == nullptr) return;
	AActor* parent_actor = OtherComp->GetOwner();

			]]>
			</Code>
		</Snippet>
	</CodeSnippet>


	<!--<Get all child actors in world outliner>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get all the children of an actor in the world outliner</Title>
			<Author>Ariel Gimenez</Author>
			<Description>gets the child objects of this actor that are in the world outliner, stores them in a Tarray, and then iterates through it to do whatever you want with those child actors. If he doesn't have child actors, he doesn't do anything.</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
	TArray<AActor*> object_child_world_outliner{};
	GetAttachedActors(object_child_world_outliner);// for reference and you need an Aactor to access this method
	
	for (AActor* actor_attach : object_child_world_outliner)
	{
		if (actor_attach == nullptr) return;
		actor_attach->Destroy();//example destroy
	}
			]]>
			</Code>
		</Snippet>
	</CodeSnippet>
	

	<!--< Get the Root Component of the actor>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get the Root Component of the actor</Title>
			<Author>Ariel Gimenez</Author>
			<Description>get the root component of this blueprint and return USceneComponent* of the actor.</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
	GetRootComponent()
			]]>
			</Code>
		</Snippet>
	</CodeSnippet>

	
		<!--< Get the Root Component of the actor>-->
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Get parent component of this component</Title>
			<Author>Ariel Gimenez</Author>
			<Description>Get the parent, but it’s a USceneComponent* root</Description>
			<!--<Shortcut> Alt </Shortcut>-->
		</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
	USceneComponent* my_component = nullptr;
	if (my_component == nullptr) return;
	USceneComponent* parent_component =  my_component->GetAttachmentRoot();
			]]>
			</Code>
		</Snippet>
	</CodeSnippet>


</CodeSnippets>

